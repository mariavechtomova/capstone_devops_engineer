Parameters:
    EnvironmentName:
        Description: Name of the environment
        Type: String

    VpcCIDR:
        Description: The IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16

    PublicSubnet1CIDR:
        Description: The IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.1.0/24

    PublicSubnet2CIDR:
        Description: The IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.2.0/24

    WorkerInstanceType:
        Description: EC2 instance type for the worker node instances.
        Type: String
        Default: t2.small

Resources:

    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    VPCGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
            -   Key: Name
                Value: Public Subnets
            -   Key: Network
                Value: Public

    PublicRoute:
        DependsOn: VPCGatewayAttachment
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway


    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet1
            RouteTableId: !Ref PublicRouteTable

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet2
            RouteTableId: !Ref PublicRouteTable

    SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Cluster security group
            VpcId: !Ref VPC

    EKSClusterRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -   Effect: "Allow"
                    Principal:
                        Service:
                        -   "eks.amazonaws.com" 
                    Action: 
                    -   "sts:AssumeRole"
            Tags:
            -   Key: Name
                Value: !Sub "${EnvironmentName}-Role"
            Path: "/"
            ManagedPolicyArns: [
                "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
                "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
            ]

    WorkerRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -   Effect: Allow
                    Principal:
                        Service:
                        -   ec2.amazonaws.com
                    Action:
                    -   "sts:AssumeRole"
            ManagedPolicyArns:
            -   "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
            -   "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
            -   "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"

    EKSCluster:
        Type: AWS::EKS::Cluster
        Properties:
            Name: !Sub '${EnvironmentName}-cluster'
            Version: '1.14'
            RoleArn: !GetAtt EKSClusterRole.Arn
            ResourcesVpcConfig:
                SecurityGroupIds:
                -   !Ref SecurityGroup
                SubnetIds:
                -   !Ref PublicSubnet1
                -   !Ref PublicSubnet2

    NodeGroup:
        Type: 'AWS::EKS::Nodegroup'
        DependsOn: EKSCluster
        Properties:
            ClusterName: !Sub '${EnvironmentName}-cluster'
            NodeRole: !GetAtt WorkerRole.Arn
            InstanceTypes:
            -   !Ref WorkerInstanceType
            Subnets:
            -   !Ref PublicSubnet1
            -   !Ref PublicSubnet2
            ScalingConfig:
                DesiredSize: 1
                MinSize: 1
                MaxSize: 1

Outputs:
    EKS: 
        Description: EKS Cluster
        Value: !Ref EKSCluster

    EKSEndpoint:
        Value: !GetAtt EKSCluster.Endpoint
        Description: EKSCluster Endpoint
